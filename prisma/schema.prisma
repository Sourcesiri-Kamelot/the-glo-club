// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  phone         String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // Membership
  membershipStatus MembershipStatus @default(ACTIVE)
  joinedAt         DateTime         @default(now())
  studioHoursUsed  Int              @default(0)
  studioHoursLimit Int              @default(2)

  // Relations
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  eventRSVPs     EventRSVP[]
  studioBookings StudioBooking[]

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  videoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([userId, postId])
  @@map("likes")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  type        EventType
  date        DateTime
  location    String
  maxAttendees Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  rsvps EventRSVP[]

  @@map("events")
}

model EventRSVP {
  id        String     @id @default(cuid())
  status    RSVPStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  @@unique([userId, eventId])
  @@map("event_rsvps")
}

model StudioBooking {
  id        String        @id @default(cuid())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  duration  Int           // in minutes
  purpose   String?
  status    BookingStatus @default(CONFIRMED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("studio_bookings")
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  fileUrl     String?
  downloadUrl String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("resources")
}

model Magazine {
  id          String   @id @default(cuid())
  title       String
  issue       String
  description String?
  coverUrl    String?
  pdfUrl      String?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("magazines")
}

// Enums
enum MembershipStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum EventType {
  GLO_NETWORK_WORKSHOP
  GLO_EAT_AND_MEET
  SPECIAL_EVENT
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ResourceType {
  TEMPLATE
  EBOOK
  GUIDE
  VIDEO
  AUDIO
}
